{"version":3,"sources":["../src/Sort/Sort.directive.ts","../src/Table/Table.directive.ts","../src/Pagination/Pagination.component.ts","../src/Configuration/ConfigurationProvider.class.ts","../src/TableState/DefaultTableState.class.ts","../src/Sort/SortOrder.enum.ts","../src/Pipe/DefaultDataPipeService.class.ts","../src/Configuration/DefaultConfiguration.class.ts","../ng2-power-table.ts"],"names":[],"mappings":"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","file":"ng2-power-table.js","sourcesContent":["import { Directive, Input, ElementRef, Renderer, SimpleChange, Inject, Host } from \"@angular/core\";\nimport { TableDirective } from \"./../Table/Table.directive\";\nimport { ITableState } from \"./../TableState/ITableState.interface\"\nimport { SortOrder } from \"./SortOrder.enum\";\n\n@Directive({\n    selector: \"[ptSort]\"\n})\nexport class SortDirective {\n\n    @Input(\"ptSort\")\n    public predicate: string;\n    public order: SortOrder;\n\n    private removeClickListener: Function;\n    private removeTableStateListener: any;\n    private removeSortListener: any;\n    private suppressSortChangedHandler: boolean;\n\n    /**\n     *\n     */\n    constructor(public table: TableDirective,\n        private element: ElementRef,\n        private renderer: Renderer) {\n        this.order = SortOrder.NotSet;\n        this.suppressSortChangedHandler = false;\n\n        this.removeClickListener = this.renderer.listen(this.element.nativeElement, 'click', (ev: MouseEvent) => {\n            this.onClicked(ev);\n        });\n\n        this.removeTableStateListener = this.table.tableStateChange.subscribe((tableState: ITableState) => {\n            this.onTableStateChanged(tableState);\n        });\n    }\n\n    ngOnDestroy() {\n        if (this.removeClickListener) this.removeClickListener();\n        if (this.removeTableStateListener && this.removeTableStateListener.unsubscribe) this.removeTableStateListener.unsubscribe();\n        this.unsubscribeToSortListener();\n    }\n\n    private unsubscribeToSortListener() {\n        if (this.removeSortListener && this.removeSortListener.unsubscribe)\n            this.removeSortListener.unsubscribe();\n    }\n\n    private resolveTableState() {\n\n        if (this.suppressSortChangedHandler) {\n            // this directive is causing the callback   \n            return;\n        }\n\n        if ((!this.table.tableState.sort.predicate || (this.table.tableState.sort.predicate !== this.predicate))\n            && this.order !== SortOrder.NotSet) {\n            // tableState has no predicate set, everything should be clear\n            this.order = SortOrder.NotSet;\n            this.updateSortDisplay();\n            // fix css classes\n            return;\n        }\n\n        if (!this.table.tableState.sort.predicate)\n            return;\n\n        if (this.table.tableState.sort.predicate === this.predicate\n            && this.table.tableState.sort.order !== this.order) {\n            // since suppressSortChangedHandler was not set, we can safely assume\n            // we need to trigger sort.\n            this.order = this.table.tableState.sort.order;\n            this.updateSortDisplay();\n            this.table.pipe();\n            // fix css classes\n            return;\n        }\n    }\n\n    private onTableStateChanged(tableState: ITableState) {\n        this.unsubscribeToSortListener();\n        this.resolveTableState();\n\n        this.removeSortListener = tableState.sort.changed.subscribe(() => {\n            this.resolveTableState();\n        });\n    }\n\n    private updateSortDisplay() {\n        var config = this.table.getConfiguration();\n        var addAscending: boolean = (this.order === SortOrder.Ascending);\n        var addDescending: boolean = (this.order === SortOrder.Descending);\n\n        if (!addDescending && addAscending) {\n            this.setElementClass(config.descendingCssClass, addDescending);\n            this.setElementClass(config.ascendingCssClass, addAscending);\n        }\n        else {\n            this.setElementClass(config.ascendingCssClass, addAscending);\n            this.setElementClass(config.descendingCssClass, addDescending);\n        }\n    }\n\n    private setElementClass(classValue: string, add: boolean) {\n        var classes = classValue.split(' ');\n\n        for (var i = 0; i < classes.length; i++) {\n            var value = classes[i];\n            this.renderer.setElementClass(this.element.nativeElement, value, add);\n        }\n    }\n\n    private onClicked(ev: MouseEvent) {\n        if (this.order === SortOrder.Descending) {\n            // manual reset\n            this.order = SortOrder.NotSet;\n        } else {\n            this.order++;\n        }\n        this.updateSortDisplay();\n\n        this.suppressSortChangedHandler = true;\n\n        var state = this.table.tableState;\n        state.sort.predicate = this.predicate;\n        state.sort.order = this.order;\n\n        this.table.pipe();\n        this.suppressSortChangedHandler = false;\n    }\n}","import { Directive, EventEmitter, Output, Input, SimpleChanges, OnChanges, ChangeDetectorRef, DoCheck, Injector } from \"@angular/core\";\n\nimport { ITableState } from \"./../TableState/ITableState.interface\";\nimport { DefaultTableState } from \"./../TableState/DefaultTableState.class\";\nimport { SortOrder } from './../Sort/SortOrder.enum';\nimport { ConfigurationProvider } from './../Configuration/ConfigurationProvider.class';\nimport { IConfiguration } from './../Configuration/IConfiguration.interface';\nimport { IDataPipeService, IDataPipeFunction } from './../Pipe/IDataPipeService.interface';\n\n@Directive({\n    selector: \"[ptTable]\"\n})\nexport class TableDirective {\n    private dataPipeService: IDataPipeService;\n    private currentConfiguration: IConfiguration;\n    private removeConfigListener: any;\n\n    /*\n        one-way binding, consumer provides originalArray\n    */\n    @Input('ptTable')\n    public originalArray: Array<any>;\n\n    /*\n        two-way binding for ptDisplayArray\n    */\n    @Input('ptDisplayArray')\n    public displayArray: Array<any>;\n    @Output('ptDisplayArrayChange')\n    displayArrayChange: EventEmitter<Array<any>> = new EventEmitter<Array<any>>();\n\n    /*\n        Event for custom data-pipe implemented by component.\n        Only used if observer is present. Otherwise a IDataPipeService\n        is resolved from the injector.\n    */\n    @Output('ptDataPipe')\n    public dataPipe: EventEmitter<any> = new EventEmitter<any>();\n\n    /*\n        two-way binding for ITableState\n    */\n    @Input('ptTableState')\n    public tableState: ITableState;\n    @Output('ptTableStateChange')\n    tableStateChange: EventEmitter<ITableState> = new EventEmitter<ITableState>();\n\n    /*\n        one-way binding, consumer can override configuration vs using globalConfiguration\n    */\n    @Input('ptConfiguration')\n    public configurationOverride: IConfiguration;\n\n    constructor(private changeDetectorRef: ChangeDetectorRef,\n        private injector: Injector,\n        private configurationProvider: ConfigurationProvider) {\n\n        this.removeConfigListener = this.configurationProvider.globalConfigurationChanged.subscribe((config: IConfiguration) => {\n            this.currentConfiguration = null;\n            this.pipe();\n        });\n    }\n\n    ngOnDestroy() {\n        if (this.removeConfigListener && this.removeConfigListener.unsubscribe) this.removeConfigListener.unsubscribe();\n    }\n\n    ngOnInit() {\n        if (this.tableState) {\n            this.tableStateChange.emit(this.tableState);\n        }\n\n        this.getTableState();\n\n        if (this.dataPipe.observers.length > 0){\n            this.pipe();\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        var callPipe: boolean = false;\n\n        if (changes['tableState'] && this.tableState) {\n            this.tableStateChange.emit(this.tableState);\n        }\n        if (changes['dataPipe']) {\n            callPipe = true;\n        }\n        if (changes['originalArray']) {\n            callPipe = true;\n        }\n        if (changes['configurationOverride']) {\n            this.dataPipeService = null;\n            this.currentConfiguration = null;\n            callPipe = true;\n        }\n\n        if (callPipe) {\n            this.pipe();\n        }\n    }\n\n    private getTableState() {\n        if (!this.tableState) {\n            this.tableState = new DefaultTableState();\n            this.tableStateChange.emit(this.tableState);\n            this.changeDetectorRef.detectChanges();\n        }\n        return this.tableState;\n    }\n\n    public getConfiguration(): IConfiguration {\n        if (this.currentConfiguration)\n            return this.currentConfiguration;\n\n        if (this.configurationOverride) {\n            this.currentConfiguration = this.configurationOverride;\n        } else {\n            this.currentConfiguration = this.configurationProvider.globalConfiguration;\n        }\n\n        return this.currentConfiguration;\n    }\n\n    public updateDisplayArray(results: Array<any>, totalItemCount: number): void {\n        this.tableState.pagination.totalItemCount = totalItemCount;\n\n        this.displayArray = results;\n        this.displayArrayChange.emit(this.displayArray);\n    }\n\n    public pipe() {\n        var state = this.getTableState();\n        var config = this.getConfiguration();\n        var pipeResult: Promise<Array<any>>;\n\n        if (this.dataPipe.observers.length > 0) {\n            this.dataPipe.emit([this, state, config]);\n            return;\n        }\n\n        if (!this.dataPipeService)\n            this.dataPipeService = this.injector.get(config.pipeServiceType);\n\n        this.dataPipeService.pipe(this.originalArray, state, config)\n            .then((array: Array<any>) => {\n                this.displayArray = array;\n                this.displayArrayChange.emit(this.displayArray);\n                this.changeDetectorRef.detectChanges();\n            });\n    };\n}\n","import { Component, OnInit, Host } from '@angular/core';\n\nimport { TableDirective } from './../Table/Table.directive';\nimport { ITableState } from './../TableState/ITableState.interface';\n\nvar paginationTemplate = `\n<div class=\"btn-group\" role=\"group\">\n  <button type=\"button\" class=\"btn btn-default\" [disabled]=\"currentPage === 1\"\n    [ngClass]=\"{ 'disabled' : currentPage === 1}\"\n     (click)=\"goToFirstPage()\"><i class=\"fa fa-angle-double-left\"></i></button>\n  <button type=\"button\" class=\"btn btn-default\" [disabled]=\"currentPage==1\"\n    [ngClass]=\"{ 'disabled' : currentPage === 1}\" \n    (click)=\"goToPreviousPage()\"><i class=\"fa fa-angle-left\"></i></button>\n\n  <button *ngFor=\"let page of pages\" type=\"button\" class=\"btn btn-default\" \n    [ngClass]=\"{ 'active' : page === currentPage}\"\n    (click)=\"selectPage(page)\">\n    {{page}}\n  </button>\n\n  <button type=\"button\" class=\"btn btn-default\" [disabled]=\"currentPage==numPages\" \n    [ngClass]=\"{ 'disabled' : currentPage === numPages}\"\n    (click)=\"goToNextPage()\"><i class=\"fa fa-angle-right\"></i></button>\n  <button type=\"button\" class=\"btn btn-default\" [disabled]=\"currentPage==numPages\" \n    [ngClass]=\"{ 'disabled' : currentPage === numPages}\"\n    (click)=\"goToLastPage()\"><i class=\"fa fa-angle-double-right\"></i></button>\n</div>`;\n\n@Component({\n    selector: 'pt-pagination',\n    template: paginationTemplate\n})\nexport class PaginationComponent {\n    private removeTableStateListener: any;\n    private removePaginationListener: any;\n\n    public currentPage: number;\n    public pages: Array<number>;\n    public numPages: number;\n\n    public displayedPagesCount: number;\n\n    /**\n     *\n     */\n    constructor(public table: TableDirective) {\n\n        this.displayedPagesCount = 5;\n\n        this.onTableStateChanged(this.table.tableState);\n        this.removeTableStateListener = this.table.tableStateChange.subscribe((tableState: ITableState) => {\n            this.onTableStateChanged(tableState);\n        });\n        \n    }\n\n    ngOnInit() {\n        this.rebuildPagination();\n    }\n\n    ngOnDestroy() {\n        if (this.removeTableStateListener && this.removeTableStateListener.unsubscribe) this.removeTableStateListener.unsubscribe();\n        this.unsubscribeToPagination();\n    }\n\n    private unsubscribeToPagination() {\n        if (this.removePaginationListener && this.removePaginationListener.unsubscribe) this.removePaginationListener.unsubscribe();\n    }\n\n    private rebuildPagination() {\n        var start = 1;\n        var end: number;\n        var i: number;\n\n        if (!this.table.tableState || !this.table.tableState.pagination) return;\n\n        var pagination = this.table.tableState.pagination;\n        \n        this.numPages = Math.max(1, Math.ceil(pagination.totalItemCount / pagination.pageSize));\n\n        this.currentPage = Math.floor(pagination.start / pagination.pageSize) + 1;\n\n        start = Math.max(start, this.currentPage - Math.abs(Math.floor(this.displayedPagesCount / 2)));\n        end = start + this.displayedPagesCount;\n\n        if (end > this.numPages) {\n            end = this.numPages + 1;\n            start = Math.max(1, end - this.displayedPagesCount);\n        }\n\n        this.pages = [];\n\n        for (i = start; i < end; i++) {\n            this.pages.push(i);\n        }\n\n    }\n\n    public goToFirstPage() {\n        this.selectPage(1);\n    }\n\n    public goToPreviousPage() {\n        this.selectPage(this.currentPage - 1);\n    }\n\n    public goToNextPage() {\n        this.selectPage(this.currentPage + 1);\n    }\n\n    public goToLastPage() {\n        this.selectPage(this.numPages);\n    }\n\n    public selectPage(page: number): void {\n        if (page > 0 && page <= this.numPages) {\n            var pageSize = this.table.tableState.pagination.pageSize;\n            this.triggerPaging((page - 1) * pageSize);\n        }\n    }\n\n    private triggerPaging(start: number) {\n        this.table.tableState.pagination.start = start;\n        this.table.pipe();\n    }\n\n    private onTableStateChanged(tableState: ITableState) {\n        this.unsubscribeToPagination();\n        this.rebuildPagination();\n\n        if (tableState && tableState.pagination && tableState.pagination.changed) {\n            this.removePaginationListener = tableState.pagination.changed.subscribe(() => {\n                this.rebuildPagination();\n            });\n        }\n    }\n}","import { EventEmitter, Injectable } from \"@angular/core\";\nimport { DefaultConfiguration } from \"./DefaultConfiguration.class\";\nimport { IConfiguration } from \"./IConfiguration.interface\";\n\n@Injectable()\nexport class ConfigurationProvider {\n\n    public globalConfigurationChanged: EventEmitter<IConfiguration> = new EventEmitter<IConfiguration>();\n    private unsubscribeObject: any;\n\n    private _globalConfiguration: IConfiguration;\n    get globalConfiguration(): IConfiguration {\n        if (!this._globalConfiguration) {\n            this._globalConfiguration = DefaultConfiguration.create();\n            this.registerListener();\n        }\n\n        return this._globalConfiguration;\n    }\n    set globalConfiguration(config: IConfiguration) {\n        if (this.unsubscribeObject && this.unsubscribeObject.unsubscribe)\n            this.unsubscribeObject.unsubscribe();\n\n        var original = this._globalConfiguration;\n        this._globalConfiguration = config;\n\n        if (original !== this._globalConfiguration && this._globalConfiguration) {\n            this.registerListener();\n            this.globalConfigurationChanged.emit(this._globalConfiguration);\n        }\n    }\n\n    private registerListener() {\n        this.unsubscribeObject = this._globalConfiguration.changed.subscribe(() => {\n            this.globalConfigurationChanged.emit(this._globalConfiguration);\n        })\n    }\n\n}","import { EventEmitter } from \"@angular/core\";\nimport { ITableState, ITableStatePagination, ITableStateSearch, ITableStateSort } from \"./ITableState.interface\";\nimport { SortOrder } from './../Sort/SortOrder.enum';\n\nexport class DefaultTableStateSearch implements ITableStateSearch {\n\n}\n\nexport class DefaultTableStatePagination implements ITableStatePagination {\n    \n    public changed: EventEmitter<void> = new EventEmitter<void>();\n    \n    private _start: number;\n    get start(): number {\n        return this._start;\n    }\n    set start(value: number) {\n        var original = this._start;\n        this._start = value;\n\n        this.boundsCheck();\n\n        if (original !== this._start) \n            this.changed.emit();\n    }\n       \n    private _pageSize: number;\n    get pageSize(): number {\n        return this._pageSize;\n    }\n    set pageSize(value: number) {\n        var original = this._pageSize;\n        this._pageSize = value;\n\n        if (original !== this._pageSize) \n            this.changed.emit();\n    }\n\n    private _totalItemCount: number;\n    get totalItemCount(): number {\n        return this._totalItemCount;\n    }\n    set totalItemCount(value: number) {\n        var original = this._totalItemCount;\n        this._totalItemCount = value;\n\n        this.boundsCheck();\n\n        if (original !== this._totalItemCount) \n            this.changed.emit();\n    }\n\n    boundsCheck() {\n        if (this._start >= this._totalItemCount) {\n            let numPages = Math.max(1, Math.ceil(this._totalItemCount / this._pageSize));\n            this._start = (numPages - 1) * this._pageSize;\n        }\n    }\n\n    constructor() {\n        this.start = 0;\n        this.pageSize = 10;\n        this.totalItemCount = 0;\n    }\n}\n\nexport class DefaultTableStateSort implements ITableStateSort {\n    \n    public changed: EventEmitter<void> = new EventEmitter<void>();\n    \n    private _order: SortOrder;\n    get order(): SortOrder {\n        return this._order;\n    }\n    set order(order: SortOrder) {\n        var original = this._order;\n        this._order = order;\n\n        if (original !== this._order) \n            this.changed.emit();\n    }\n\n    private _predicate: string;\n    get predicate(): string {\n        return this._predicate;\n    }\n    set predicate(predicate: string) {\n        var original = this._predicate;\n        this._predicate = predicate;\n\n        if (original !== this._predicate) \n            this.changed.emit();\n    }\n\n    constructor() {\n        this._order = SortOrder.NotSet;\n        this._predicate = null;\n    }\n}\n\nexport class DefaultTableState implements ITableState {\n    public sort: DefaultTableStateSort;\n    public pagination: DefaultTableStatePagination;\n    public search: DefaultTableStateSearch;\n\n    constructor() {\n        this.sort = new DefaultTableStateSort();\n        this.pagination = new DefaultTableStatePagination();\n        this.search = new DefaultTableStateSearch();\n    }\n}\n\n","import { Injectable } from \"@angular/core\";\n\nexport enum SortOrder {\n\n    NotSet,\n    Ascending,\n    Descending\n}\n","import { Injectable } from \"@angular/core\";\n\nimport { IDataPipeService } from \"./IDataPipeService.interface\";\nimport { ITableState } from \"./../TableState/ITableState.interface\";\nimport { IConfiguration } from \"./../Configuration/IConfiguration.interface\";\nimport { SortOrder } from \"./../Sort/SortOrder.enum\";\n\n@Injectable()\nexport class DefaultDataPipeService<TTableState extends ITableState, TConfiguration extends IConfiguration> \n    implements IDataPipeService {\n\n    public pipe(data: Array<any>, tableState: TTableState, configuration: TConfiguration): Promise<Array<any>> {\n        if (!data || !Array.isArray(data)) {\n            return Promise.resolve(undefined);\n        }\n\n        var resultArray = [].concat(data);\n\n        resultArray = this.filter(resultArray, tableState, configuration);\n        resultArray = this.sort(resultArray, tableState, configuration);\n        resultArray = this.page(resultArray, tableState, configuration);\n    \n        return Promise.resolve(resultArray);\n    }\n\n    sort(data: Array<any>, tableState: TTableState, configuration: TConfiguration): Array<any> {\n        if (!tableState.sort || !tableState.sort.predicate || tableState.sort.order === SortOrder.NotSet) \n            return data;\n        \n        return data.sort((a, b) => {\n            // TODO: Implement configuration setting to help with aggresive minification by consumer\n            var aValue = a[tableState.sort.predicate];\n            var bValue = b[tableState.sort.predicate];\n\n            // null or undefined values should be first\n            if (!aValue) return 1;\n\n            var filter = aValue > bValue ? 1 : aValue < bValue ? -1 : 0;\n\n            // Descending order only if items not equal, and descending selected.\n            if (tableState.sort.order === SortOrder.Descending\n                && filter !== 0) {\n                filter = filter * -1\n            };\n\n            return filter;\n        });\n\n    }\n\n    filter(data: Array<any>, tableState: TTableState, configuration: TConfiguration): Array<any> {\n        // TODO: Implement filtering\n        return data;\n    }\n\n    page(data: Array<any>, tableState: TTableState, configuration: TConfiguration): Array<any> {\n        if (!tableState.pagination || !tableState.pagination.pageSize)\n            return data;\n\n        tableState.pagination.totalItemCount = data.length;\n\n        return data.slice(tableState.pagination.start, tableState.pagination.start + tableState.pagination.pageSize);\n    }\n    \n}","import { EventEmitter } from \"@angular/core\";\n\nimport { DefaultDataPipeService } from \"./../Pipe/DefaultDataPipeService.class\";\nimport { IConfiguration } from \"./IConfiguration.interface\";\n\nexport class DefaultConfiguration implements IConfiguration {\n    public changed: EventEmitter<void> = new EventEmitter<void>();\n    \n    private _ascendingCssClass: string;\n    get ascendingCssClass(): string {\n        return this._ascendingCssClass;\n    }\n    set ascendingCssClass(cssClass: string) {\n        var original = this._ascendingCssClass;\n        this._ascendingCssClass = cssClass;\n\n        if (original !== this._ascendingCssClass) \n            this.changed.emit();\n    }\n\n    private _descendingCssClass: string;\n    get descendingCssClass(): string {\n        return this._descendingCssClass;\n    }\n    set descendingCssClass(cssClass: string) {\n        var original = this._descendingCssClass;\n        this._descendingCssClass = cssClass;\n\n        if (original !== this._descendingCssClass) \n            this.changed.emit();\n    }\n\n    private _pipeServiceType: any;\n    get pipeServiceType(): any {\n        return this._pipeServiceType;\n    }\n    set pipeServiceType(t: any) {\n        var original = this._pipeServiceType;\n        this._pipeServiceType = t;\n\n        if (original !== this._pipeServiceType) \n            this.changed.emit();\n    }\n\n    public static create(): DefaultConfiguration{\n        var config = new DefaultConfiguration();\n\n        config.ascendingCssClass = 'pt-sort-asc'\n        config.descendingCssClass = 'pt-sort-desc'\n        config.pipeServiceType = DefaultDataPipeService;\n\n        return config; \n    } \n\n    public copy() : DefaultConfiguration{\n        var config = new DefaultConfiguration();\n\n        config.ascendingCssClass = this.ascendingCssClass;\n        config.descendingCssClass = this.descendingCssClass\n        config.pipeServiceType = this.pipeServiceType;\n\n        return config; \n    }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n// import components / directives for the module\nimport { TableDirective } from './src/Table/Table.directive';\n\nimport { SortDirective } from './src/Sort/Sort.directive';\n\nimport { DefaultDataPipeService } from './src/Pipe/DefaultDataPipeService.class';\n\nimport { PaginationComponent } from './src/Pagination/Pagination.component';\n\nimport { ConfigurationProvider } from './src/Configuration/ConfigurationProvider.class';\n\n// export for any consumers of module\nexport { TableDirective } from './src/Table/Table.directive';\n\nexport { SortOrder } from './src/Sort/SortOrder.enum';\nexport { SortDirective } from './src/Sort/Sort.directive';\n\nexport { ITableState } from './src/TableState/ITableState.interface';\nexport { DefaultTableState, DefaultTableStatePagination, DefaultTableStateSearch, DefaultTableStateSort } from './src/TableState/DefaultTableState.class';\n\nexport { DefaultDataPipeService } from './src/Pipe/DefaultDataPipeService.class';\nexport { IDataPipeService } from './src/Pipe/IDataPipeService.interface';\n\nexport { PaginationComponent } from './src/Pagination/Pagination.component';\n\nexport { ConfigurationProvider } from './src/Configuration/ConfigurationProvider.class';\nexport { IConfiguration } from './src/Configuration/IConfiguration.interface';\nexport { DefaultConfiguration } from './src/Configuration/DefaultConfiguration.class';\n\nvar declarations =[\n        TableDirective,\n        SortDirective,\n        PaginationComponent\n    ]; \n\n@NgModule({\n    exports:declarations,\n    declarations: [declarations],\n    imports: [CommonModule],\n    providers: [DefaultDataPipeService, ConfigurationProvider]\n})\nexport class PowerTableModule {\n\n}\n"]}